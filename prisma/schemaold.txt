generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(uuid())
  name           String
  email          String     @unique
  image          String
  createdAt      DateTime   @default(now())
  emailVerified  DateTime?
  hashedPassword String?
  accounts       Account[]
  sessions       Session[]
  favorites      Favorite[]
  listings       Listing[]  @relation("UserListings")
  reviews        Review[]

  @@map("users")
}

model Listing {
  id          String     @id @default(uuid())
  userId      String?
  title       String
  description String
  price       Float
  category    String
  city        String
  locality    String
  status      String
  images      String[]
  createdAt   DateTime   @default(now())
  favorites   Favorite[]
  user        User?      @relation("UserListings", fields: [userId], references: [id])
  reviews     Review[]

  @@map("listings")
}

model Review {
  id        String   @id @default(uuid())
  listingId String?
  userId    String?
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  listing   Listing? @relation(fields: [listingId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@map("reviews")
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String?
  listingId String?
  createdAt DateTime @default(now())
  listing   Listing? @relation(fields: [listingId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@map("favorites")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
